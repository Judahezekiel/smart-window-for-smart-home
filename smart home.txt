#define BLYNK_TEMPLATE_ID "TMPL3CZCJbdEG"
#define BLYNK_TEMPLATE_NAME "smart home"

#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <ESP32Servo.h>
#include <Adafruit_BMP085.h>

char auth[] = "yPWDW_xYWR5knYKxXsngT6kjgm09Zmn5";
char ssid[] = "Galaxy A22";
char pass[] = "0122333.";

Servo WindowServo;
Servo flameServo;
Servo doorServo;

#define WINDOW_PIN 18
#define FLAME_SERVO_PIN 27
#define DOOR_SERVO_PIN 25
#define buz 12
#define led1 26
#define led2 4
#define RAIN_SENSOR_PIN 32
#define LIGHT_SENSOR_PIN 35
#define FLAME_SENSOR_PIN 34
#define DOOR_SENSOR_PIN 33

bool isAutomatic = true;
unsigned long lastLightHighTime = 0;
bool lightWasHigh = false;
bool ledstate = true;

void setup() {
  Serial.begin(115200);
  Blynk.begin(auth, ssid, pass);

  WindowServo.attach(WINDOW_PIN);
  flameServo.attach(FLAME_SERVO_PIN);
  doorServo.attach(DOOR_SERVO_PIN);

  WindowServo.write(0);
  flameServo.write(0);

  pinMode(buz, OUTPUT);
  digitalWrite(buz, LOW);
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
}

void moveServoSmoothly(Servo &servo, int startPos, int endPos, int delayTime) {
  if (startPos < endPos) {
    for (int pos = startPos; pos <= endPos; pos++) {
      servo.write(pos);
      delay(delayTime);
    }
  } else {
    for (int pos = startPos; pos >= endPos; pos--) {
      servo.write(pos);
      delay(delayTime);
    }
  }
}

void loop() {
  Blynk.run();

  if (isAutomatic) {
    int flameValue = analogRead(FLAME_SENSOR_PIN);
    Serial.print("Flame Sensor Value: ");
    Serial.println(flameValue);

    if (flameValue < 1000) {
      Serial.println("Flame detected! Moving servo and activating buzzer...");
      delay(100);
      flameServo.write(90);
      for (int i = 0; i < 3; i++) {
        digitalWrite(buz, HIGH);
        delay(800);
        digitalWrite(buz, LOW);
        delay(200);
      }
    } else {
      flameServo.write(0);
    }

    int rainValue = analogRead(RAIN_SENSOR_PIN);
    Serial.print("Rain Sensor Value: ");
    Serial.println(rainValue);

    if (rainValue < 1000) {
      moveServoSmoothly(WindowServo, WindowServo.read(), 0, 10);
      delay(5000);
      rainValue = analogRead(RAIN_SENSOR_PIN);
      Serial.print("Rain Sensor Value after delay: ");
      Serial.println(rainValue);
      if (rainValue >= 1000) {
        moveServoSmoothly(WindowServo, WindowServo.read(), 90, 20);
        delay(1000);
      }
    } else {
      int lightValue = analogRead(LIGHT_SENSOR_PIN);
      Serial.print("Light Sensor Value: ");
      Serial.println(lightValue);

      if (lightValue > 2000) {
        if (!lightWasHigh) {
          lastLightHighTime = millis();
          lightWasHigh = true;
        }
        if (millis() - lastLightHighTime >= 2000) {
          digitalWrite(led1, HIGH);
        }
      } else {
        if (lightWasHigh) {
          digitalWrite(led1, LOW);
          lightWasHigh = false;
        }
      }

      int irvalue = analogRead(DOOR_SENSOR_PIN);
      Serial.print("Rain Sensor Value: ");
      Serial.println(irvalue);

      if (irvalue < 1000) {
        moveServoSmoothly(doorServo, doorServo.read(), 90, 10);
        delay(5000);
        irvalue = analogRead(DOOR_SENSOR_PIN);
        Serial.print("Rain Sensor Value after delay: ");
        Serial.println(irvalue);
        if (irvalue >= 1000) {
          moveServoSmoothly(doorServo, doorServo.read(), 0, 20);
          delay(1000);
        }
      }
    }
  }
}

BLYNK_WRITE(V1) {
  if (!isAutomatic) {
    int hingePosition = param.asInt();
    doorServo.write(hingePosition);
  }
}

BLYNK_WRITE(V3) {
  if (!isAutomatic) {
    WindowServo.write(param.asInt());
  }
}

BLYNK_WRITE(V2) {
  ledstate = param.asInt();
  if (ledstate) {
    digitalWrite(led1, HIGH);
    digitalWrite(led2, HIGH);
    Serial.println("Switched to AUTOMATIC mode");
  } else {
    digitalWrite(led1, LOW);
    digitalWrite(led2, LOW);
    Serial.println("Switched to MANUAL mode");
  }
}

BLYNK_WRITE(V10) {
  isAutomatic = param.asInt();
  if (isAutomatic) {
    Serial.println("Switched to AUTOMATIC mode");
  } else {
    Serial.println("Switched to MANUAL mode");
  }
}

BLYNK_WRITE(V5) {
  int trigger = param.asInt();
  if (trigger == 1) {
    Serial.println("Manual trigger: Executing main command...");
  }
}